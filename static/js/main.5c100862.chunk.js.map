{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c100862.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#cc1034\",\r\n    rgb: \"rgb(204,16,52)\",\r\n    half_op: \"rgba(204,16,52,0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125,215,29)\",\r\n    half_op: \"rgba(125,215,29,0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251,68,67)\",\r\n    half_op: \"rgba(251,68,67,0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// DRAW circles on the map wit interactive tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n\r\n        {/* Loop through countries and draw circles on the screen */}\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipItem: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  const buildChartData = (data, casesType = \"cases\") => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastDays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                borderColor: \"#cc1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, // United States, United Kingdom\n            value: country.countryInfo.iso2, //UK, USA, FR\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4.5);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}